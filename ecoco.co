#!bin
#!bare
fs						= require "fs"
exec					= require "child_process" .exec
coco					= require 'coco'
uglify				= require 'uglify-js' .uglify
uglify_parser = require 'uglify-js' .parser
path_helper   = require 'path'

cp_exec = !(cmd,name || 'cmd',fn)->
	exec cmd, (err,stdout,stderr)->
		console.log "\007#name.err: "+err if err
		console.log "#name.stdout: "+stdout if stdout
		console.log "\007#name.stderr: "+stderr if stderr

		if fn?
			fn ...

get_package_json = (src,json_no_parse)->
	# if m=src.match /\"package.json\"/
	if not fs.existsSync "package.json"
		return false

	package_json = fs.readFileSync "package.json", \utf8
	if not json_no_parse
		package_json = JSON.parse package_json

	package_json

detect_new_line = (src)->
	if src.indexOf("\r\n") !== -1
		return "\r\n"
	else if src.indexOf("\n") !== -1
		return "\n"
	else
		throw "Cannot detect new line character"

coco_make_ugly = (code)->
	ast = uglify_parser.parse code
	ast = uglify.ast_mangle ast
	ast = uglify.ast_squeeze ast
	uglify.gen_code ast

coco_make_file = (path_in)->
	co					 = fs.readFileSync path_in, \utf8
	nl           = detect_new_line co
	options			 = {}
	bUglify			 = false
	co_include	 = ''
	include_file = ''

	prepend_text = ''
	precompile_prepend_text = ''
	str_options = []
	
	# make path_out
	path_out = cocofile.replace /\.(?:co|js\.co)$/, '.js'

	# check if package.json exists
	# if it does add "package.json" variable
	# at the beginning of the program
	if (package_json = get_package_json(co,true))
		package_json = "PACKAGE_JSON = #package_json"
		package_json = package_json.replace //#nl[\t ]*{//g, '{'
		package_json = package_json.replace //#nl[\t ]*\[//g, '['
		# console.log package_json.match //#nl[\t ]*{//g
		precompile_prepend_text = package_json

		# precompile_prepend_text = "PACKAGE_JSON = #nl#package_json#nl#nl"
		# package_json_js = "PACKAGE_JSON = #nl#package_json#nl#nl"
		# fs.writeFileSync "package.json.js", package_json_js, \utf8
		# co = "\#!include=package.json.js#nl"+co


	# if m=co.match /^\#!(.*)(?:\r?\n)/m
	if m=co.match /^\#!(.*)$/gm
		
		(cmd)<~ m.forEach
		cmd -= /^#!/
		if m=cmd.match /^include=(.*)$/
			include_file := m[1]

			include_path = path_in - //#{path_helper.basename(path_in)}// + (include_file-/\.co$/+'.co')
			co_include := fs.readFileSync include_path, \utf8

			return true


		# no (function(){ ... }).call(this); around program
		if <[b bare]>.indexOf(cmd) !== -1
			options.bare = true
			return true

		# uglify (compress)
		if <[u ugly uglify compress]>.indexOf(cmd) !== -1
			bUglify := true
			return true

		# add #!/usr/bin/env node
		# remove .js from filename
		if <[bin binary]>.indexOf(cmd) !== -1
			prepend_text += "#!/usr/bin/env node\n"
			str_options.push "node binary"
			path_out -= /\.js$/
			return true


	co = co_include+precompile_prepend_text+co
	try
		js = coco.compile co, options

		str_options.push('bare') if options.bare

		if bUglify
			js = coco_make_ugly js
			str_options.push('uglify')

		if include_file
			str_options.push("include=#include_file")

		str_options = str_options*', '
		str_options = " (#str_options)" if str_options
		console.log "#path_out: done#str_options"
	
		js = prepend_text+js

		fs.writeFileSync path_out, js, \utf8

		return true
	catch err
		console.log "\007"
		console.log "#path_out.error",err

if process.argv.length < 3
	console.log "Not enough arguments"
	return false



cocofile = process.argv.pop!
coco_make_file cocofile
